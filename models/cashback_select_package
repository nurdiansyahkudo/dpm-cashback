from odoo import models, fields, api
from odoo.exceptions import UserError

PAYMENT_STATE_SELECTION = [
        ('not_paid', 'Not Paid'),
        ('in_payment', 'In Payment'),
        ('paid', 'Paid'),
        ('partial', 'Partially Paid'),
        ('reversed', 'Reversed'),
        ('invoicing_legacy', 'Invoicing App Legacy'),
]

class AccountMove(models.Model):
    _inherit = 'account.move'

    cashback_percentage = fields.Float(
        string='Cashback Percentage',
        help="Enter a cashback percentage, e.g., 10 for 10%."
    )
    cashback_amount = fields.Monetary(
        string='Cashback Amount',
        readonly=False,
        compute='_compute_cashback_amount',
        store=True,  # Changed to store=True for better performance and usability
    )
    cashback_package = fields.Selection(
        [('395000000', '395,000,000'), ('495000000', '495,000,000')],
        string='Package',
        help="Select a cashback package for the calculation."
    )
    remaining_amount = fields.Monetary(
        string="Remaining Amount",
        compute='_compute_cashback_amount',
        store=True,
    )

    # Field untuk label dinamis
    move_type_label = fields.Char(string="Move Type Label", compute="_compute_move_type_label")

    # Untuk Brand
    brand = fields.Char(
        string='Brand',
        compute="_compute_brand",
        search="_search_brand",  # Menambahkan fungsi pencarian 
        store=True,  # Store is set to True for better performance
    )

    # Define the invoice_list_ids field
    invoice_list_ids = fields.Many2many(
        'account.move',
        'account_move_cashback_rel',  # Relational table
        'cashback_id',  # Column for cashback invoice
        'invoice_id',    # Column for original invoice
        string="Invoice List"
    )

    selected_invoice_ids = fields.Many2many(
        'account.move',
        'account_move_selected_invoice_rel',
        'cashback_id',
        'selected_invoice_id'
    )

    total_selected_invoices = fields.Monetary(
        string="Total of Selected Invoices",
        compute="_compute_total_selected_invoices",
        store=True,
    )

    # Field untuk status cashback
    cashback_status = fields.Selection(
        [('cashbacked', 'Cashbacked'), ('not_yet', 'Not Yet')],
        string="Cashback Status",
        compute='_compute_cashback_status',
        store=True
    )

    @api.depends('selected_invoice_ids', 'payment_state')
    def _compute_cashback_status(self):
        for record in self:
            # Cek apakah invoice sudah dimasukkan ke cashback invoice dan statusnya paid atau in_payment
            cashbacked = any(
                invoice.move_type == 'in_invoice' and 
                invoice.journal_id.name == 'Cashback' and 
                invoice.payment_state in ['paid', 'in_payment']  # Pertimbangkan status 'paid' dan 'in_payment'
                for invoice in record.selected_invoice_ids
            )
            
            # Memperbarui status cashback
            if cashbacked:
                record.cashback_status = 'cashbacked'  # Status Cashbacked
            else:
                record.cashback_status = 'not_yet'  # Status Not Yet
            # record.cashback_status = 'cashbacked' if cashbacked else 'not_yet'

    @api.depends('selected_invoice_ids')
    def _compute_total_selected_invoices(self):
        for record in self:
            # Hitung total dari price_total untuk semua selected_invoice_ids
            record.total_selected_invoices = sum(invoice.amount_untaxed for invoice in record.selected_invoice_ids)

    @api.depends('invoice_line_ids.name', 'invoice_line_ids.product_id', 'selected_invoice_ids')
    def _compute_brand(self):
        for record in self:
            brands = []
            # Cek apakah ini adalah invoice cashback (tipe 'in_invoice' dan journal adalah Customer Cashback)
            is_cashback_invoice = record.move_type == 'in_invoice' and record.journal_id.name == 'Cashback'

            # Periksa selected_invoice_ids terlebih dahulu
            if record.selected_invoice_ids:
                for selected_invoice in record.selected_invoice_ids:
                    for line in selected_invoice.invoice_line_ids:
                        # Ambil brand dari selected_invoice_ids jika tersedia
                        if line.product_id:
                            brand_value = line.product_id.product_tmpl_id.attribute_line_ids.filtered(
                                lambda x: x.attribute_id.name == 'Brand'
                            ).mapped('value_ids.name')
                            brands.extend(brand_value)
            else:
                # Jika tidak ada selected_invoice_ids, lanjutkan pengecekan di invoice_line_ids
                for line in record.invoice_line_ids:
                    if is_cashback_invoice:
                        # Jika invoice cashback, ambil Brand dari 'name' di invoice_line_ids
                        if "Brand:" in line.name:
                            # Memisahkan teks berdasarkan pola ' - Brand: '
                            brand_info = line.name.split(" - Brand: ")
                            if len(brand_info) > 1:
                                # Mendapatkan nama brand setelah 'Brand:'
                                brand_name = brand_info[1].strip()
                                brands.append(brand_name)
                    else:
                        # Jika bukan invoice cashback, ambil Brand dari product_id
                        if line.product_id:
                            brand_value = line.product_id.product_tmpl_id.attribute_line_ids.filtered(
                                lambda x: x.attribute_id.name == 'Brand'
                            ).mapped('value_ids.name')
                            brands.extend(brand_value)  # Gabungkan brand

            # Menggabungkan brand menjadi string unik
            record.brand = ', '.join(set(brands)) if brands else 'No Brand'


    def _search_brand(self, operator, value):
        # Fungsi pencarian untuk field brand
        domain = []
        for move in self.search([]):
            if move.brand and value.lower() in move.brand.lower():
                domain.append(move.id)
        return [('id', 'in', domain)]

    @api.depends('cashback_percentage', 'selected_invoice_ids', 'cashback_package')
    def _compute_cashback_amount(self):
        for record in self:
            # Hitung total untaxed amount dari selected_invoice_ids
            total_amount = sum(invoice.amount_untaxed for invoice in record.selected_invoice_ids)
            # Check and parse the cashback package value
            cashback_package_value = float(record.cashback_package or 0)
            # Get the cashback percentage and calculate the cashback amount
            cashback_percentage = record.cashback_percentage or 0

            if cashback_percentage:
                cashback_amount = (cashback_percentage / 100) * cashback_package_value
            else:
                cashback_amount = 0

            # Set the cashback amount in the field
            record.cashback_amount = cashback_amount
            
            # Calculate remaining amount
            remaining_amount = total_amount - cashback_package_value

            # Store remaining amount in the specified field
            record.remaining_amount = remaining_amount if remaining_amount > 0 else 0

    @api.depends('move_type', 'journal_id')
    def _compute_move_type_label(self):
        """Ubah label move_type berdasarkan kondisi journal dan move_type."""
        for record in self:
            if record.move_type == 'in_invoice' and record.journal_id.name == 'Cashback':
                record.move_type_label = "Customer Cashback"
            elif record.move_type == 'in_invoice':
                record.move_type_label = "Customer Credit Note"
            else:
                record.move_type_label = dict(self.fields_get(allfields=['move_type'])['move_type']['selection']).get(record.move_type, "")

    @api.model
    def create_cashback(self):
        # Mendapatkan invoice yang dipilih oleh user
        invoices = self.env['account.move'].browse(self.env.context.get('active_ids', []))
        
        if not invoices:
            return

        # Menampilkan jendela pilihan paket cashback
        return self.with_context(active_ids=invoices.ids).action_open_cashback_package_wizard()
    
    def action_open_cashback_package_wizard(self):
    # Open the cashback package selection wizard
        return {
            'type': 'ir.actions.act_window',
            'name': 'Select Cashback Package',
            'res_model': 'cashback.package.wizard',
            'view_mode': 'form',
            'view_id': self.env.ref('your_module_name.view_cashback_package_wizard_form').id,
            'target': 'new',
            'context': {'active_ids': self.ids}
        }

    def action_create_cashback_invoice(self):
        """Function to create cashback invoice based on selected cashback package."""
        # Cek apakah paket cashback telah dipilih
        if not self.cashback_package:
            raise UserError("Please select a cashback package before creating the invoice.")
        
        # Convert the cashback_package to float
        selected_cashback_amount = float(self.cashback_package)

        # Journal khusus untuk Customer Cashback
        cashback_journal = self.env['account.journal'].search([('name', '=', 'Cashback')], limit=1)
        if not cashback_journal:
            raise UserError("Journal 'Cashback' not found!")

        # Fetch the "Cashback Expenses" account
        cashback_expenses_account = self.env['account.account'].search([('name', '=', 'ADDITIONAL EXPENSES - SALES PROGRAM')], limit=1)
        if not cashback_expenses_account:
            raise UserError("Account 'ADDITIONAL EXPENSES - SALES PROGRAM' not found!")

        # Fetch the "Accrued Expenses - Customers Cashback" account
        accrued_expenses_account = self.env['account.account'].search([('name', '=', 'ACCRUED EXPENSES - CUSTOMERS CASHBACK')], limit=1)
        if not accrued_expenses_account:
            raise UserError("Account 'ACCRUED EXPENSES - CUSTOMERS CASHBACK' not found!")

        # Memastikan semua invoice memiliki partner yang sama
        partner = self.partner_id
        if any(invoice.partner_id != partner for invoice in self.selected_invoice_ids):
            raise UserError("All selected invoices must have the same partner for cashback.")

        # Inisialisasi variabel untuk menyimpan data invoice cashback
        cashback_invoice_vals = {
            'move_type': 'in_invoice',  # Tipe invoice: customer refund
            'journal_id': cashback_journal.id,
            'partner_id': partner.id,
            'invoice_line_ids': [],
            'selected_invoice_ids': [(6, 0, self.selected_invoice_ids.ids)],  # Link original invoices
        }

        # Membuat line product untuk "Cashback"
        product_cashback = self.env['product.product'].search([('name', '=', 'Cashback')], limit=1)
        if not product_cashback:
            product_cashback = self.env['product.product'].create({
                'name': 'Cashback',
                'detailed_type': 'consumable',  # Tipe produk
                'list_price': 0.0,  # Harga awal 0
            })

        # Menghitung total amount dari selected_invoice_ids
        total_amount = sum(invoice.amount_untaxed for invoice in self.selected_invoice_ids)
        
        # Tentukan amount yang dimasukkan ke dalam cashback invoice sesuai dengan paket yang dipilih
        cashback_amount = min(total_amount, selected_cashback_amount)
        excess_amount = total_amount - cashback_amount if total_amount > selected_cashback_amount else 0.0

        # Menambahkan produk "Cashback" ke invoice line
        cashback_invoice_vals['invoice_line_ids'].append((0, 0, {
            'product_id': product_cashback.id,
            'name': 'Cashback Package Invoice',
            'quantity': 1,
            'price_unit': cashback_amount,
            'tax_ids': [(6, 0, [])],  # Mengatur pajak menjadi tidak ada
            'account_id': cashback_expenses_account.id,  # Menggunakan akun Cashback Expenses
        }))

        # Membuat invoice cashback
        cashback_invoice = self.env['account.move'].create(cashback_invoice_vals)

        # Handle difference amount if it exists and post to selected account
        if self.difference_amount > 0:
            journal_entry_vals = {
                'move_type': 'entry',
                'journal_id': self.env.ref('account.journal_sale').id,
                'ref': f"Cashback Difference for {self.selected_invoice_ids.mapped('partner_id').name}",
                'line_ids': [
                    (0, 0, {
                        'account_id': self.difference_account_id.id,
                        'debit': self.difference_amount,
                        'credit': 0,
                        'partner_id': self.selected_invoice_ids.mapped('partner_id').id,
                    }),
                    (0, 0, {
                        'account_id': self.env.ref('account.data_account_type_current_liabilities').id,
                        'debit': 0,
                        'credit': self.difference_amount,
                        'partner_id': self.selected_invoice_ids.mapped('partner_id').id,
                    }),
                ]
            }

            # Buat jurnal entry untuk excess amount
            self.env['account.move'].create(journal_entry_vals)

        # Kembalikan aksi untuk membuka invoice yang baru dibuat
        return {
            'name': 'Customer Cashback',
            'view_mode': 'form',
            'res_model': 'account.move',
            'res_id': cashback_invoice.id,
            'type': 'ir.actions.act_window',
            'target': 'current',
            'views': [(self.env.ref('cashback.view_move_form_cashback').id, 'form')],
        }

    def action_post(self):
        super(AccountMove, self).action_post()

        for move in self:
            if move.move_type == 'in_invoice' and move.journal_id.name == 'Cashback':
                # Update cashback status for selected invoices
                for invoice in move.selected_invoice_ids:
                    if invoice.move_type == 'out_invoice':  # Ensure only regular invoices are checked
                        invoice.cashback_status = 'cashbacked'  # Set status to 'cashbacked'

    def action_payment_register(self):
        # Check if the journal is 'Customer Cashback'
        if self.journal_id.name == 'Cashback':
            # Execute the custom wizard
            return {
                'name': 'Register Payment for Cashback',
                'type': 'ir.actions.act_window',
                'res_model': 'account.payment.register',
                'view_mode': 'form',
                'view_id': self.env.ref('account.view_account_payment_form').id,
                'target': 'new',
                'context': {
                    'default_amount': self.amount_residual,
                    'default_partner_id': self.partner_id.id,
                    'default_payment_options': 'direct_customer',
                    'active_model': 'account.move',
                    'active_ids': [self.id],
                    'active_id': self.id,
                },
            }
        else:
            # If the journal is not 'Customer Cashback', run the default Odoo action
            return super(AccountMove, self).action_payment_register()
